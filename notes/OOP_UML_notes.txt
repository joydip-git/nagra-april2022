1. OOP
	1. Inheitance
	2. Encapsulation: placing data members and functionalities together inside a class, is known as encapsulation
	3. data abstraction: hiding the data of an object (private)
	4. polymorphism

PIE theory

a. class, object
b. constructor and destructor
c. virtual and overriding
d. abstract class
e. interface

2. UML: Unified Modelling Language
	

Layered architecture: 3 tier architecture
	a. data access logic
	b. business logic
	c. presentation logic


Object:
	a. attributes or properties: gender, height, complexion, name etc. [data]
	b. behavior: run, jog, cook, sleep, write code, learn, read, write [functionalities]

name	height	
------------------------
akash	5.6   => object
animesh 5.10  => object
shruti  5.3   => object

{ name: "akash", height: 5.6 }
{ name: "akash", height: 5.6 }
{ name: "akash", height: 5.6 }


name, height, complexion, company, location, salary, edu-background, experience

account-holder-name, account-id, account-balance, type-account, minimum-balanace, withdrawal-limit
-------------------------------------------------------------------------------------------------------
akash			1	1000			savings	500			5000
abhishek		2	2000			current	0			10000	

create table(
account_id int,
acc_holder_name varchar(50),
acc_balance decimal(18,2),
type_acc varchar(10),
min_balance decimal(18,2),
with_limit decimal(18,2)
)

insert into table-name (column-names...) values(values...)

class name	attributes 		data-types
-----------------------------------------------------------------------------------------
account		acountid		int (numerical, non-fractional)
		accountholdername	string/char array
		accountbalance		decimal/float (numerical, fractional)
		accounttype		string/char array
		minimumbalance		decimal/float (numerical, fractional)
		withdrawallimit		decimal/float (numerical, fractional)

class account
{
	//fields, data members, attributes. characterestics
	private int acountid;
	public string accountholdername;
	private string accounttype;
	private float accountbalance;
	private float minimumbalance;
	private float withdrawallimit;

	~account()
	{
	}

	//default constructor: assigns default values to the data members
	public account()
	{
	}

	//parameterized constructor: assigns passed/parameter values to the data members
	//arguments of the function which are also local ti the function only
	public account(int id, string name, string type, float balance, float limit, float minbalance)
	{
		acountid = id;
		accountholdername = name;
		accounttype = type;
		accountbalance = balance;
		minimumbalance = minbalance;
		withdrawallimit = limit;
	}

        public int getAccountId()
	{
		return accountid;
	}

	//methods, functinalities, behaviors
	public float debitAmount(float amount)
	{
		int x = 10;
		accountbalance = accountbalance - amount;
		return accountbalance;
	}

	public void creditAmount(float amount)
	{
		accountbalance = accountbalance + amount;
		//return accountbalance;
	}
}

object => instance created based on the schema/blueprint known as class, which decides value for which attributes should be part of that object and which functionalities are part of that object

 akashObjRef = account() (python)
 //account akashObjRef; (C++)

 account akashObjRef =  new account(1,"akash","savings",1000, 10000,500); (C++, java, C#)
 akashObjRef.debitAmount(200);
 akashObjRef.creditAmount(300);

account devanadObjRef =  new account(2, "devanand","current",2000,20000,0);
//devanadObjRef.accountid=2
devanadObjRef.getAccountId();
devanadObjRef.debitAmount(200);
devanadObjRef.creditAmount(300);

devanadObjRef = null;

constructor?????:
	- special type of function, without any return type, NOT EVEN void and with the name same as that of a class
	- initialize the data members of the object
	- does not return anything
	- it is called during object creation (neither before, nor after, never called with the object reference)

1. runtime finds out the data members of the class
2. runtime allocates memory block for each of them
3. runtime puts default values in those memory blocks by invoking the constructor

4. upon creation of the object the initial address of the object is returned and assigned to a variable by runtime
5. now, with the reference/address of that object you can access other members of the object

destructor:

class filehandler/databasehandler
{
   string filePath;
   writeIntoFile(string data){}
   readFromFile(){}
}


access specifiers:

code reusability


Developer
Hr

//base or parent class
class emloyee
{
	//attributes or data members are inherited into the derievd class
	private string name;
	private int id;
	private float basicPay;
	private float daPay;
	private float hraPay;	

	//constructors are not inherited into the derievd class
	//if no constructor is written inside a class, at least the default ctor will be supplied
	//but if you write a parameterized ctor inside the class, then NO DEFAULT CTOR will be supplied
	//if you write a parameterized ctor inside the class, better write the default ctor also, since this class might be derived into child class

	public employee(){}
	public employee(string name, int id, float basic, float da, float hra)
	{
		this.name = name;
		this.id = id;
		this.basicPay = basic;
		this.daPay = da;
		this.hraPay = hra;
	}

	public float calculateSalary()
	{
		return this.basicPay + this.daPay + this.hraPay;
	}		
}

//child/derived class
class developer:employee
{
	private:
		float incentivePay;

	public:
		developer()
		{
		}
		
		developer(string name, int id, float basic, float da, float hra, float incentive)
		{
			super(name, id, basic,da,hra);
			this.incentivePay = incentive;
		}

		float calculateSalary()
		{
			float partialSalary = super.calculateSalary();
			return partialSalary + this.incentivePay;
		}
}

class juniorDeveloper:developer{ }
//child/derived class
class hr:employee
{
	float gratuityPay;

	
	public hr()
	{
	}	
	
		
	public hr(string name, int id, float basic, float da, float hra, float gratuity)
	{
		super(name, id, basic,da,hra);
		this.gratuityPay = gratuity;
	}

	@override
	public float calculateSalary()
	{
		float partialSalary = super.calculateSalary();
		return partialSalary + this.gratuityPay;
	}
}

//when you create an instance of a child class, not only the constructor of the child class is invoked (the one you are invoking), side by side, the default constructor of the base class will be invoked by runtime, implicitly

hr hrObj = new hr('anil',1,1000,2000,3000,4000);
hrObj.calculateSalary();
//hrObj.name=''
developer devObj = new developer('sunil',2,1500,2500,3500,4500);

class laptop
{
	string name;
	float price;
}

inheritance:
	single-level: one base <-- one child
	multi-level: base<--child1<--child2
	multiple: more than one base class for a child (C#, Java)
	hybrid

A <-- B <-- C

	A, B <-- C


printer <-- deskjet <--home deskjet

A=> f1(), f2()
B=> f1(), f3()

C obj = new C();
obj.f1();


SOLID:
	s: single responsibility
	O: open close principle (open for extension, closed for change)
	L: 
	I: 
	D: dependency injection


int x = 10;
int y = 20;
int z = x+y;//30

string s1 = 'john'
string s2 = 'michelin'
string fullname = s1+s2;//john michelin
s1.Concatenate(s2)

+ <= operator //operator overloading

class Addtion
{
	//method overloading
	public void Add(int x, int y){}//invocable
	public void Add(int x, int y, int z){}
	public void Add(int x, int y, float z){}
	public void Add(int x, float y, int z){}
}
signature of a function: <return type> <method-name>(arguments....)
1. number of arguments
2. data type of arguments
3. order/position of the arguments
Note: return type does not play any role in the difference between the methods w.r.t. polymorphism

Addition additionObj = new Addition();
additionObj.Add(12,13); //invocation
additionObj.Add(12,13.45,14);

during compilation time: (compiler needs to detect which method to be called, for a particular invocation)
binding between the invocation line and the method to invoke

polymorphism: 
a. compile time or static polymorphism: one class involved (no inheritance involved here)
	1. function overloading
	2. operator overloading
b. dynamic polymorphism: minimum two classes=> base and a child (inheritance involved here)
	1. function overriding (base class method gets overriden by child class method)


Hair stylist			butcher			film director
----------------------------------------------------------------------------
void cut(){}			void cut(){}		void cut(){}

			animal
			makesound()


cat:animal		dog:animal		bird:animal
------------------------------------------------------------------------
void makesound()	void makesound()	void makesound()

callmakesound(animal animalObj)
{
	animalObj.makesound();
}

cat c = new cat();
dog d = new dog();
bird b = new bird();
callmakesound(c)
callmakesound(d)
callmakesound(b)

//upcasting:
animal animal1 = new cat();

//downcasting:
cat c = (cat)animal1;


dataaccess
	getdata();

dataaccessfromfile:dataaccess
	getdata():implementation (code to read data from file)

dataaccessfromdatabase:dataaccess
	getdata():implementation (code to read data from database)


hr => 
	float calculateSalary() (inherited), 
	float calculateSalary() (own)

hrObj.calculateSalary()
devObj.calculateSalary()




	





	